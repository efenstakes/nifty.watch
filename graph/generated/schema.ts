// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Stats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalNFTs", Value.fromBigInt(BigInt.zero()));
    this.set("totalSales", Value.fromI32(0));
    this.set("adFee", Value.fromBigInt(BigInt.zero()));
    this.set("totalCollections", Value.fromBigInt(BigInt.zero()));
    this.set("lastUpdateTime", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Stats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Stats", id.toString(), this);
    }
  }

  static load(id: string): Stats | null {
    return changetype<Stats | null>(store.get("Stats", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalNFTs(): BigInt {
    let value = this.get("totalNFTs");
    return value!.toBigInt();
  }

  set totalNFTs(value: BigInt) {
    this.set("totalNFTs", Value.fromBigInt(value));
  }

  get totalSales(): i32 {
    let value = this.get("totalSales");
    return value!.toI32();
  }

  set totalSales(value: i32) {
    this.set("totalSales", Value.fromI32(value));
  }

  get adFee(): BigInt {
    let value = this.get("adFee");
    return value!.toBigInt();
  }

  set adFee(value: BigInt) {
    this.set("adFee", Value.fromBigInt(value));
  }

  get totalCollections(): BigInt {
    let value = this.get("totalCollections");
    return value!.toBigInt();
  }

  set totalCollections(value: BigInt) {
    this.set("totalCollections", Value.fromBigInt(value));
  }

  get lastUpdateTime(): BigInt {
    let value = this.get("lastUpdateTime");
    return value!.toBigInt();
  }

  set lastUpdateTime(value: BigInt) {
    this.set("lastUpdateTime", Value.fromBigInt(value));
  }
}

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tags", Value.fromStringArray(new Array(0)));
    this.set("totalOwners", Value.fromI32(0));
    this.set("totalSales", Value.fromI32(0));
    this.set("totalApprovals", Value.fromI32(0));
    this.set("totalListedNfts", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get bgImage(): string | null {
    let value = this.get("bgImage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bgImage(value: string | null) {
    if (!value) {
      this.unset("bgImage");
    } else {
      this.set("bgImage", Value.fromString(<string>value));
    }
  }

  get image(): string | null {
    let value = this.get("image");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (!value) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(<string>value));
    }
  }

  get tags(): Array<string> {
    let value = this.get("tags");
    return value!.toStringArray();
  }

  set tags(value: Array<string>) {
    this.set("tags", Value.fromStringArray(value));
  }

  get marketID(): BigInt | null {
    let value = this.get("marketID");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set marketID(value: BigInt | null) {
    if (!value) {
      this.unset("marketID");
    } else {
      this.set("marketID", Value.fromBigInt(<BigInt>value));
    }
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get lister(): string | null {
    let value = this.get("lister");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lister(value: string | null) {
    if (!value) {
      this.unset("lister");
    } else {
      this.set("lister", Value.fromString(<string>value));
    }
  }

  get onAdTill(): BigInt | null {
    let value = this.get("onAdTill");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set onAdTill(value: BigInt | null) {
    if (!value) {
      this.unset("onAdTill");
    } else {
      this.set("onAdTill", Value.fromBigInt(<BigInt>value));
    }
  }

  get goingLiveOn(): BigInt | null {
    let value = this.get("goingLiveOn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set goingLiveOn(value: BigInt | null) {
    if (!value) {
      this.unset("goingLiveOn");
    } else {
      this.set("goingLiveOn", Value.fromBigInt(<BigInt>value));
    }
  }

  get mintingOn(): BigInt | null {
    let value = this.get("mintingOn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set mintingOn(value: BigInt | null) {
    if (!value) {
      this.unset("mintingOn");
    } else {
      this.set("mintingOn", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalNfts(): i32 {
    let value = this.get("totalNfts");
    return value!.toI32();
  }

  set totalNfts(value: i32) {
    this.set("totalNfts", Value.fromI32(value));
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get type(): string | null {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type(value: string | null) {
    if (!value) {
      this.unset("type");
    } else {
      this.set("type", Value.fromString(<string>value));
    }
  }

  get is1155(): boolean {
    let value = this.get("is1155");
    return value!.toBoolean();
  }

  set is1155(value: boolean) {
    this.set("is1155", Value.fromBoolean(value));
  }

  get website(): string | null {
    let value = this.get("website");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set website(value: string | null) {
    if (!value) {
      this.unset("website");
    } else {
      this.set("website", Value.fromString(<string>value));
    }
  }

  get mintingWebsite(): string | null {
    let value = this.get("mintingWebsite");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mintingWebsite(value: string | null) {
    if (!value) {
      this.unset("mintingWebsite");
    } else {
      this.set("mintingWebsite", Value.fromString(<string>value));
    }
  }

  get twitter(): string | null {
    let value = this.get("twitter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set twitter(value: string | null) {
    if (!value) {
      this.unset("twitter");
    } else {
      this.set("twitter", Value.fromString(<string>value));
    }
  }

  get discord(): string | null {
    let value = this.get("discord");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set discord(value: string | null) {
    if (!value) {
      this.unset("discord");
    } else {
      this.set("discord", Value.fromString(<string>value));
    }
  }

  get linkedIn(): string | null {
    let value = this.get("linkedIn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set linkedIn(value: string | null) {
    if (!value) {
      this.unset("linkedIn");
    } else {
      this.set("linkedIn", Value.fromString(<string>value));
    }
  }

  get socials(): Array<string> | null {
    let value = this.get("socials");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set socials(value: Array<string> | null) {
    if (!value) {
      this.unset("socials");
    } else {
      this.set("socials", Value.fromStringArray(<Array<string>>value));
    }
  }

  get totalOwners(): i32 {
    let value = this.get("totalOwners");
    return value!.toI32();
  }

  set totalOwners(value: i32) {
    this.set("totalOwners", Value.fromI32(value));
  }

  get totalSales(): i32 {
    let value = this.get("totalSales");
    return value!.toI32();
  }

  set totalSales(value: i32) {
    this.set("totalSales", Value.fromI32(value));
  }

  get totalApprovals(): i32 {
    let value = this.get("totalApprovals");
    return value!.toI32();
  }

  set totalApprovals(value: i32) {
    this.set("totalApprovals", Value.fromI32(value));
  }

  get totalListedNfts(): i32 {
    let value = this.get("totalListedNfts");
    return value!.toI32();
  }

  set totalListedNfts(value: i32) {
    this.set("totalListedNfts", Value.fromI32(value));
  }

  get addedOn(): BigInt | null {
    let value = this.get("addedOn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set addedOn(value: BigInt | null) {
    if (!value) {
      this.unset("addedOn");
    } else {
      this.set("addedOn", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenURI", Value.fromString(""));
    this.set("collection", Value.fromString(""));
    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
    this.set("totalOwners", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value!.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value!.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get approved(): string | null {
    let value = this.get("approved");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set approved(value: string | null) {
    if (!value) {
      this.unset("approved");
    } else {
      this.set("approved", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get totalOwners(): BigInt {
    let value = this.get("totalOwners");
    return value!.toBigInt();
  }

  set totalOwners(value: BigInt) {
    this.set("totalOwners", Value.fromBigInt(value));
  }
}

export class Wallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
    this.set("totaNFTsSold", Value.fromI32(0));
    this.set("totaNFTsOwned", Value.fromI32(0));
    this.set("totalCollectionsListed", Value.fromI32(0));
    this.set("totalApprovalsFrom", Value.fromI32(0));
    this.set("totalApprovalsTo", Value.fromI32(0));
    this.set("ethInvested", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Wallet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Wallet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Wallet", id.toString(), this);
    }
  }

  static load(id: string): Wallet | null {
    return changetype<Wallet | null>(store.get("Wallet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totaNFTsSold(): i32 {
    let value = this.get("totaNFTsSold");
    return value!.toI32();
  }

  set totaNFTsSold(value: i32) {
    this.set("totaNFTsSold", Value.fromI32(value));
  }

  get totaNFTsOwned(): i32 {
    let value = this.get("totaNFTsOwned");
    return value!.toI32();
  }

  set totaNFTsOwned(value: i32) {
    this.set("totaNFTsOwned", Value.fromI32(value));
  }

  get totalCollectionsListed(): i32 {
    let value = this.get("totalCollectionsListed");
    return value!.toI32();
  }

  set totalCollectionsListed(value: i32) {
    this.set("totalCollectionsListed", Value.fromI32(value));
  }

  get totalApprovalsFrom(): i32 {
    let value = this.get("totalApprovalsFrom");
    return value!.toI32();
  }

  set totalApprovalsFrom(value: i32) {
    this.set("totalApprovalsFrom", Value.fromI32(value));
  }

  get totalApprovalsTo(): i32 {
    let value = this.get("totalApprovalsTo");
    return value!.toI32();
  }

  set totalApprovalsTo(value: i32) {
    this.set("totalApprovalsTo", Value.fromI32(value));
  }

  get ethInvested(): BigInt {
    let value = this.get("ethInvested");
    return value!.toBigInt();
  }

  set ethInvested(value: BigInt) {
    this.set("ethInvested", Value.fromBigInt(value));
  }
}

export class Activity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("collection", Value.fromString(""));
    this.set("wallet", Value.fromString(""));
    this.set("type", Value.fromString(""));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Activity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Activity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Activity", id.toString(), this);
    }
  }

  static load(id: string): Activity | null {
    return changetype<Activity | null>(store.get("Activity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value!.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get wallet(): string {
    let value = this.get("wallet");
    return value!.toString();
  }

  set wallet(value: string) {
    this.set("wallet", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
